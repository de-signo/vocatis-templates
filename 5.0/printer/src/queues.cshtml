@* 
 *  Copyright (C) 2023 DE SIGNO GmbH
 *  
 *  This program is dual licensed. If you did not license the program under
 *  different terms, the following applies:
 *  
 *  This program is free software: You can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *  
 *@
@using iSign
@using System.Linq
@using System.Web.Optimization
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@using System.Web.Caching
@using Newtonsoft.Json
@{
  // Parse model
  var model = new FormsModel(this);
  
  // Read queue overview (cached)
  IEnumerable<QueueSummary> queueStatus;
  queueStatus = Cache.Get("Vocatis_GetWaitQueueOverview") as IEnumerable<QueueSummary>;
  if (queueStatus == null)
  {
    queueStatus = @Vocatis.GetWaitQueueOverview();
    Cache.Add("Vocatis_GetWaitQueueOverview", queueStatus, null,
              DateTime.Now.AddSeconds(1), Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
  }

  var buttons = from fi in model.Style.StyleInstance
                where fi.Key.StartsWith("text")
                where !String.IsNullOrEmpty(fi.Value as string)
                let index = Int32.Parse(fi.Key.Substring(4))
                let queueid = model.Style.StyleInstance["queueid" + index].Value
                let cats = model.Style["catid" + index].Value as CommonGuidId[]
                let qs = queueStatus.Where(s=>s.Id.Equals(queueid)).FirstOrDefault()
                select new {
                  title = fi.Value,
                  queue = queueid,
                  categories = cats == null ? new string[0] : cats.Select(g=>g.ToString()),
                  openCloseStatus = qs == null ? 0 : qs.OpenCloseStatus,
                  queueLength = qs == null ? 0 : qs.QueueLength
                };

  Response.ContentType = "application/json";
}
@Html.Raw(JsonConvert.SerializeObject(buttons))
