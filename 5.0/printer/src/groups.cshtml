@* 
 *  Copyright (C) 2023 DE SIGNO GmbH
 *  
 *  This program is dual licensed. If you did not license the program under
 *  different terms, the following applies:
 *  
 *  This program is free software: You can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *  
 *@
@using iSign
@using System.Linq
@using System.Web.Optimization
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@using System.Web.Caching
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@functions {
  JObject ReadConfig()
  {
    // deserialize JSON directly from a file
    using (StreamReader file = File.OpenText(Server.MapPath("config.json")))
    {
      JsonSerializer serializer = new JsonSerializer();
      return (JObject)serializer.Deserialize(file, typeof(JObject));
    }
  }
  IEnumerable<QueueSummary> GetQueueStatus() {
    // Read queue overview (cached)
    IEnumerable<QueueSummary> queueStatus;
    queueStatus = Cache.Get("Vocatis_GetWaitQueueOverview") as IEnumerable<QueueSummary>;
    if (queueStatus == null)
    {
      queueStatus = @Vocatis.GetWaitQueueOverview();
      Cache.Add("Vocatis_GetWaitQueueOverview", queueStatus, null,
                DateTime.Now.AddSeconds(1), Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
    }
    return queueStatus;
  }
}
@{
  // Parse model
  var model = new FormsModel(this);
  var config = ReadConfig();
  var queueStatus = GetQueueStatus();

  var groups = from g in config["groups"]
               let type = g["type"]
               select (type != null && (string)type != "group") ? (object)g : new {
                title = g["title"],
                items =
                  from b in g["items"]
                  let queueid = CommonGuidId.FromString((string)b["queue"])
                  let qs = queueStatus.Where(s=>s.Id.Equals(queueid)).FirstOrDefault()
                  select new {
                    title = b["title"],
                    queue = queueid,
                    categories = b["categories"],
                    openCloseStatus = qs == null ? 0 : qs.OpenCloseStatus,
                    queueLength = qs == null ? 0 : qs.QueueLength
                  } 
                };

  Response.ContentType = "application/json";
}
@Html.Raw(JsonConvert.SerializeObject(groups))
