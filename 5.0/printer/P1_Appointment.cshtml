@*
  Printer navigation level 1
  Select appointment
*@
@using System.Web.Optimization
@using System.Text.RegularExpressions
@using Stolltec.Forms.Model
@using Stolltec.Vocatis.Model
@using Stolltec.Vocatis
@using ISS.Session
@using iSign

@{
  var showQrCode = PageData["appointment_print_or_scan"];
  var debug = false;
  // Parse model
  var Model = new FormsModel(this);

  // setup layout
  PageData["model"] = Model;
  PageData["show_home"] = true;
  PageData["show_back"] = false;

  var partial = Request["X-Requested-With"] == "XMLHttpRequest" || (Request.Headers != null && Request.Headers["X-Requested-With"] == "XMLHttpRequest");
  if (! partial)
  {
    Layout = "PL_Layout.cshtml";
  }

  // Read request
  var s = Request["i"];
  var a = Request["a"];
  var tracking_id = (string)Model.Style["tracking_id"].Value;
  dynamic catids = Model.Style["catid_apt"].Value;
  const int count = 4;
  var planName = new string[count];
  var queueid = new CommonGuidId[count];
  for (int i = 0; i < count; i++)
  {
      planName[i] = (string)Model.Style["plan_name" + (i+1)].FieldInstance.Value;
      queueid[i] = (CommonGuidId)Model.Style["queueid" + (i+1) + "_apt"].FieldInstance.Value;
  }
  string ticketUrl = null;
}
<div class="main">
  <div id="stages">
  @switch (s)
  {
    default:
    case "1":
        <img src="direction.png" alt="direction">
        <h1>Bitte scannen Sie den QR-Code aus Ihrer Terminbestätigung!</h1>
        <textarea id="scan" ></textarea>
      break;
    case "2":
      // Read data
      var re = new Regex("UID[:Ö]([0-9]*)");
      var m = re.Matches(a);
      dynamic entry = null;
      if (m.Count != 1 && !debug)
      {
        <!-- code: @a -->
        <h2>Ungültiger QR-Code!</h2>
        <p>Bitte scannen Sie den QR-Code aus ihrer aktuellen Terminbestätigung ein.</p>
      }
      else
      {
        if (m.Count != 1 && debug)
        {
          entry = new { id=a, plan="debug", name="debug name", time="debug time"};
        }
        else
        {
          var apt_id = m[0].Groups[1].Value;
          <!-- id: @apt_id -->
          entry = (from dynamic x in Model.DataSource("import")
                   where String.Equals(x.id, apt_id)
                  select x).FirstOrDefault();
        }
        if (entry == null)
        {
          <h3>Ihr Termin wurde nicht in unserer Liste gefunden.</h3>
        }
        else
        {
          string plan = entry.plan as string;
          var index = Array.IndexOf(planName, plan);
          <!-- index: @index (@plan) -->
          if (index >= 0)
          {
            using (var voc = SessionInstancesModule.GetInstance().UseSharedInstance<IVocatisData>())
            {
              var ticket = voc.Instance.FindNumber(entry.id);
              if (ticket == null)
              {
                ticket = voc.Instance.NewNumber(queueid[index], catids);
                ticket.Name = entry.name;
                ticket.Phone = entry.time + ": " + entry.title;
                ticket.ReferenceId = entry.id;
                voc.Instance.UpdateNumber(ticket);
              }
              ticketUrl = Href("PrinterTicket.cshtml", new { id=ticket.Id, tid=tracking_id });
              <img src="registration.png" id="registration" alt="registration" />
              <h3>Sie sind angemeldet</h3>
              if (showQrCode)
              {
                <p>Bitte noch etwas Geduld, drucken oder scannen Sie Ihr Ticket und warten bis Ihre Nummer aufgerufen wird.</p>
                <div class="left">
                  <p>Ticket drucken</p>
                  <a class="print-button" href='@ticketUrl'><img src="printer.png" alt="Drucker"> </a>
                </div>
                <div class="right">
                  <p>Ticket scannen</p>
                  <div class="qrcode" data-url="@Href("App.cshtml", new {i=ticket.Id, t=tracking_id})"></div>
                </div>
              }
              else
              {
                <p>Bitte noch etwas Geduld,Ihr Aufruf wird zeitnah zur Terminzeit erfolgen.</p>
                <a class="print-now" href='@ticketUrl' style="display: none;"></a>
              }
            }
          }
          else
          {
            <h3>Dieses Gerät ist nicht für Ihren Termin konfiguriert, bitte wenden Sie sich an die korrekte Stelle.</h3>
          }
        }
      }
      break;
  }
  </div>

  @if (! partial)
  {
    <div id="loading" style="display: none;">
      <h3>Einen Moment, Ihr Code wird geprüft.</h3>
    </div>
    @* wait popup is shown, while generating a new number *@
    <section id="waitPopup" style="display: none;">
      <h4>Ihre Wartemarke wird gedruckt</h4>
      <div>
        <img src="wait.gif" id="wait" alt="wait" />
      </div>
      <p>Bitte entnehmen Sie Ihre Wartenummer</p>
      <img src="PfeilRechts.png" />
    </section>

    @* take popup is shown, when the printout is ready *@
    <section id="takePopup" style="display: none;">
        <h4>Ihre Wartemarke wird gedruckt</h4>
      <div>
        <img src="wait.gif" id="wait" alt="wait" />
      </div>
      <p>Bitte entnehmen Sie Ihre Wartenummer</p>
      <img src="PfeilRechts.png" />
    </section>

    @* show popup shows the number on the screen *@
    <section id="showPopup" style="display: none;">
      <h3>Sie werden angemeldet im Fachbereich</h3>
      <h2 data-name></h2>
      <p>Bitte merken Sie sich Ihre Anmeldenummer:</p>
      <div class="number" data-number></div>
      <p>Sie werden aufgerufen</p>
    </section>
  }
</div>

@if (! partial)
{
  <script type="text/javascript">
    appointment.init('@Html.Raw(Model.Navigate("P1_Appointment.cshtml", new { i="2", a="--text--"}))');
    @if (String.IsNullOrEmpty(s) && !String.IsNullOrEmpty(a))
    {
      <text>
      appointment.loadStage2('@Html.Raw(a.Replace("\n", "\\n").Replace("\r", "\\r"))');
      </text>
    }

    $(document).ready(function () {
      reportPrinterStatus({
        url: "@Href(Stolltec.Forms.PrinterStatus.Path)",
        interval: 60000
      });
    });
  </script>
}