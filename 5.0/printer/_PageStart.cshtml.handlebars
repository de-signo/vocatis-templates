@using Stolltec.Forms.Model
@using System.Text
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.IO
@using ISS.Data
@*
// ==============
// Configuration
// ==============
*@
@functions
{
  FormsModel ReadModel(WebPageBase page)
  {
    var model = new FormsModel(page);
{{#if enable_app }}
    var qr = Int32.Parse((string)model.Style["qr"].FieldInstance.Value ?? "0");
    var qrTicket = (qr & 1) == 1;
    var qrMonitor = (qr & 2) == 2;

    // show qr code on printed ticket?
    PageData["ticket_show_qr_code"] = qrTicket;

    // show qr code on queue list?
    PageData["list_print_or_scan"] = qrMonitor;

    // enable print or scan in appointments
    PageData["appointment_print_or_scan"] = qrMonitor;

    // app options
    PageData["app_options"] = model.Style.StyleInstance.Where(f => f.Key == "wt").Select(f => (string)f.Value).FirstOrDefault() == "1" ? "wt" : ""; // app options (wt = show wait time);
{{else}}
    PageData["ticket_show_qr_code"] = false;
    PageData["list_print_or_scan"] = false;
    PageData["appointment_print_or_scan"] = false;
    PageData["app_options"] = "";
{{/if}}
    PageData["model"] = model;
    return model;
  }
}
@{
  // app available?
  PageData["enable_app"] = {{enable_app}};

  // enable open/close
  PageData["enable_open_close"] = {{enable_open_close}};

  // enable Multi-Lang
  PageData["multilang"] = {{multilang}};

  PageData["ReadModel"] = new Func<WebPageBase, FormsModel>(ReadModel);
}

@*
  // ==============
  // Multi-Lang
  // ==============
*@
@functions
{
  IDictionary<string, string> ParseLang(string lang, out IList<string> langs)
  {
    var file = Server.MapPath("text.csv");
    if (file.EndsWith(@"\app\text.csv"))
      file = Server.MapPath("../text.csv");
    using (var reader = new StreamReader(file, Encoding.UTF8))
    {
      var parser = new CsvParser(reader, ';', '\"');

      // read header
      var line = parser.ReadLine();
      langs = line.Skip(1).ToList();
      line = parser.ReadLine();

      // find index
      var index = langs.IndexOf(lang);
      if (index < 0)
        throw new ArgumentException(String.Format("Language with id {0} not found in table.", lang));
      index += 1;

      // read keys
      var dict = new Dictionary<string, string>();
      while (line != null)
      {
        if (line.Length <= index || (line.Length == 1 && String.IsNullOrEmpty(line[0])))
        {
          line = parser.ReadLine();
          continue;
        }
        dict.Add(line[0], line[index]);
        line = parser.ReadLine();
      }
      return dict;
    }
  }

{{#if use_groups_config }}
  JObject ReadConfig()
  {
    // deserialize JSON directly from a file
    using (StreamReader file = File.OpenText(Server.MapPath("config.json")))
    {
      JsonSerializer serializer = new JsonSerializer();
      return (JObject)serializer.Deserialize(file, typeof(JObject));
    }
  }
{{/if}}
}
@{
  // read text snippets
  var multilang = PageData["multilang"];
  var lang = !multilang ? "de" :
    Request["lang"] ?? Request["l"] ?? "de";

  IList<string> langs;
  var string_map = ParseLang(lang, out langs);

  PageData["lang"] = lang;
  PageData["langs"] = multilang ? langs : new List<string>() { "de" } ;
  PageData["string_map"] = string_map;

{{#if use_groups_config }}
  PageData["config"] = new Func<JObject>(ReadConfig);
{{/if}}
}
