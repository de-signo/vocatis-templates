<!DOCTYPE html>
@using iSign
@using System.Linq
@using System.Web.Optimization
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@using System.Web.Caching
@{
  var disableOpenClose = !PageData["enable_open_close"];
  var showQrCode = PageData["list_print_or_scan"];
  var lang = PageData["lang"];
  var string_map = PageData["string_map"];

  // Parse model
  var Model = new FormsModel(this);
  var mode = (string)Model.Style["mode"].FieldInstance.Value;
  var opt = (string)Model.Style["wt"].FieldInstance.Value == "1" ? "wt" : ""; // app options (wt = show wait time)

  // Select ticket servce type (JSON vs HTML) by mode
  var ticketUrl = (mode == "print") ? "PrinterTicket.cshtml" : "Ticket.cshtml";

  IEnumerable<QueueSummary> queueStatus;
  queueStatus = Cache.Get("Vocatis_GetWaitQueueOverview") as IEnumerable<QueueSummary>;
  if (queueStatus == null)
  {
    queueStatus = @Vocatis.GetWaitQueueOverview();
    Cache.Add("Vocatis_GetWaitQueueOverview", queueStatus, null,
              DateTime.Now.AddSeconds(1), Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
  }
  var buttonCount = (from i in Enumerable.Range(1,8)
                     where !String.IsNullOrEmpty((string)Model.Style["text" + i].Value)
                     select i).Count();
  var tracking_id = (string)Model.Style["tracking_id"].Value;
}
<section id="idle">
  @if (buttonCount > 0) {
    if (showQrCode) {
      <div class="title">
        <h4>@string_map["List_HeaderQr1"]</h4>
        <h4>@string_map["List_HeaderQr2"]</h4></div>
        <div class="subtitle">
        <p>@string_map["List_Print"]</p>
        <p>@string_map["List_Scan"]</p>
      </div>
    } else {
      <h4>@string_map["List_HeaderNoQr"]</h4>
    }
  }
  <ul class="buttons-@buttonCount @if (showQrCode) { <text>with-qr-code</text> }">
    @for (int i = 1; i <= 8; i++) {
      if (!String.IsNullOrEmpty((string)Model.Style["text" + i].Value)) {
        var queueid = Model.Style["queueid" + i].Value;
        var status = queueStatus.Where(s=>s.Id.Equals(queueid)).FirstOrDefault();
    @* Queue open *@
    if (disableOpenClose || (status.OpenCloseStatus & WaitQueueOpenCloseStatus.IsOpen) != 0)
    {
      var catidI = Model.Style["catid" + i].Value as CommonGuidId[];
      string catids = catidI == null ? null : String.Join(",",catidI.Select(g=>g.ToString()).ToArray());
    <li><a href="@Href(ticketUrl, new { queueid=queueid, catid=catids, tid=tracking_id, o=opt, lang=lang })" data-label="@((string)Model.Style["text" + i].Value)"
    @if (status.QueueLength == 0) {<text>class="btn next-one"</text>} else {<text>class="btn"</text>}>
      <div>
        <svg xmlns="http://www.w3.org/2000/svg"><g><path d="M 0.0,0.0 10.0,10.0 0.0,20.0 Z" /></g></svg>
      </div>
      <div>
        @((string)Model.Style["text" + i].Value)
      </div>
      <div class="queue-status">
        <div>
          <span>
            @if (status.QueueLength > 3)
            {
              <text>@Html.Raw(String.Format(string_map["List_StatusMT3FormatRaw"], status.QueueLength))</text>
            }
            else
            {
              <text>@Html.Raw(String.Format(string_map["List_StatusLT3FormatRaw"], status.QueueLength))</text>
            }
          </span>
        </div>
        <div>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 39.7 71.2">
            <path class="cls-1" d="M11.6,14.3A6.51,6.51,0,0,0,18.1,8h0a6.38,6.38,0,0,0-6.5-6.3A6.45,6.45,0,0,0,5.1,8a6.51,6.51,0,0,0,6.5,6.3h0" transform="translate(1)"/>
            <path class="cls-1" d="M27,12.8a6.51,6.51,0,0,0,6.5-6.3h0a6.5,6.5,0,0,0-13,0A6.32,6.32,0,0,0,27,12.8h0" transform="translate(1)"/>
            <path class="cls-1" d="M38.7,21.5c0-3.9-2.8-7.2-6.8-8.7h0a7.52,7.52,0,0,1-9.4,0h-.1a11.67,11.67,0,0,0-3.1,1.7,9.15,9.15,0,0,1,5.1,7.9V38.8A4.34,4.34,0,0,1,22,42.1a4.4,4.4,0,0,1-1.6.2V66.1a3.5,3.5,0,0,0,7,0V41.9h.1V66.2a3.5,3.5,0,0,0,7,0V39.9a2.6,2.6,0,0,0,1.5.4,2.64,2.64,0,0,0,2.7-2.4h0V21.5Z" transform="translate(1)"/>
            <path class="cls-1" d="M23.3,23a9.15,9.15,0,0,0-5.1-7.9,8.86,8.86,0,0,0-1.7-.8h0a7.52,7.52,0,0,1-9.4,0H6.9C2.8,15.8,0,19.2,0,23V39.4H0a2.71,2.71,0,0,0,2.7,2.4,2.66,2.66,0,0,0,2.2-1.1v27A3.51,3.51,0,0,0,8.4,71h0a3.46,3.46,0,0,0,3.5-3.4V43.4H12V67.7a3.5,3.5,0,0,0,7,0V41.3l.3.1a2.66,2.66,0,0,0,1.2.3,2.64,2.64,0,0,0,2.7-2.4V35.2Z" transform="translate(1)"/>
            <text class="cls-2" text-anchor="middle" transform="translate(13 34)">@status.QueueLength</text>
          </svg>
        </div>
        <div class="single-button" >
          <span>
            <img src="img/single-button.gif" /><br>
            <p>Bitte drücken!</p>
          </span>
        </div>
      </div>
      @if (showQrCode) {
        <div class="qrcode" data-url="@Href("AppTicket.cshtml", new { q=queueid, c=catids, t=tracking_id, l=lang, o=opt })"></div>
      }
    </a></li>
    @* manually closed *@
    } else if ((status.OpenCloseStatus & WaitQueueOpenCloseStatus.Manual) != 0) {
    <li class="btn closed closed-manually">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg"><g><path d="M 0.0,0.0 10.0,10.0 0.0,20.0 Z" /></g></svg>
      </div>
      <div>
        @((string)Model.Style["text" + i].Value)
      </div>
      <div>
        @string_map["List_Closed"]
      </div>
    </li>
    @* closed by opening hours *@
    } else if ((status.OpenCloseStatus & WaitQueueOpenCloseStatus.IsOutsideHours) != 0) {
    <li class="btn closed closed-hours">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg"><g><path d="M 0.0,0.0 10.0,10.0 0.0,20.0 Z" /></g></svg>
      </div>
      <div>
        @((string)Model.Style["text" + i].Value)
      </div>
      <div>
        @string_map["List_ClosedHours"]
      </div>
    </li>  
    @* closed by limit *@
    } else if ((status.OpenCloseStatus & WaitQueueOpenCloseStatus.IsFull) != 0) {
    <li class="btn closed closed-limit">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg"><g><path d="M 0.0,0.0 10.0,10.0 0.0,20.0 Z" /></g></svg>
      </div>
      <div>
        @((string)Model.Style["text" + i].Value)
      </div>
      <div>
        @string_map["List_ClosedFull"]
      </div>
    </li>
    }}}
  </ul>
</section>
