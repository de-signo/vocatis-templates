@using iSign
@using System.Web.Optimization
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@using System.Web.Caching
@functions{
  IEnumerable<DisplayNumber> GetWaitQueueList(CommonGuidId id)
  {
    var list = Cache.Get("Vocatis_GetWaitQueueList") as IEnumerable<DisplayNumber>;
    if (list == null)
    {
      list = Vocatis.GetWaitQueueList(id);
      Cache.Add("Vocatis_GetWaitQueueList", list, null,
                DateTime.Now.AddSeconds(1), System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
    }
    return list;
  }
}
@{
    var Model = new FormsModel(this);
    var id = (CommonGuidId)Model.Style["source"].FieldInstance.Value;
    var cats = (CommonGuidId[])Model.Style["highlightcat"].FieldInstance.Value ?? new CommonGuidId[0];
    var list = GetWaitQueueList(id).Take(8);

    // the $.fn.vocatisList function requests the page to update the view
    // We minimize the overhead by just sending the required contents.
    var partial = Request["X-Requested-With"] == "XMLHttpRequest" || (Request.Headers != null && Request.Headers["X-Requested-With"] == "XMLHttpRequest");
}

@helper ItemsList(IEnumerable<DisplayNumber> list, CommonGuidId[] cats)
{
    <table id="list"> 
        <tbody>
            @foreach (var x in list)
            {
                <tr>
                    <td class="number">
                        @if (x.Categories.Any(cid => cats.Contains(cid.Id)))
                        {
                            <img src="termin.png" class="termin" alt="termin">
                        }
                        @x.Number
                    </td>
                    <td class="room">@x.RoomName</td>
                </tr>
                <tr class="spacer">
                    <td colspan="2"></td>
                </tr>
            }
        </tbody>
    </table>
}
@if (partial)
{
    @ItemsList(list, cats)
}
else
{
<!DOCTYPE html>
<html>
<head>
    <title>Vocatis</title>
    <link href="@Href("display.css")" type="text/css" rel="Stylesheet" />
</head>
<body class="list">
    @Scripts.Render("~/Scripts/jquery", "~/Scripts/forms", "~/Scripts/vocatis.js", "site.js")
    <header>
        <img src="plattformlogo_01.png" class="plattformlogo" alt="plattformlogo">
        <h1>Wartebereich</h1>
    </header>
    <h2>
        Bitte warten Sie, bis Ihre Nummer erscheint:
    </h2>
    @ItemsList(list, cats)

    @{
        var notify = Model.Style["notify"].FieldInstance.Value as string;
        if (notify.Contains("~speechurl~"))
        {
            string speechurl = Stolltec.Forms.Speech.SpeechHandler.Register();
            notify = notify.Replace("~speechurl~", speechurl);
        }
        var popup = Model.Style["popup"].FieldInstance.Value as string;
    }
    @if (!String.IsNullOrEmpty(notify))
    {
        <audio id="notify" data-src="@Href(notify)">
        </audio>
    }
    @if (!String.IsNullOrEmpty(popup))
    {
        <div id="popup" style="display:none;" class="popup @popup">
            <h3>~room~</h3>
            <h4>~number~</h4>
        </div>
    }
</body>
</html>
}