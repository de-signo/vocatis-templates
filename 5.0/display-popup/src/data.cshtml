@using iSign
@using Newtonsoft.Json
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@using System.Linq
@using System.Security.Cryptography;
@using System.Text;
@using System.Web.Caching
@functions{
  IEnumerable<DisplayNumber> GetWaitQueueList(CommonGuidId id)
  {
    var cacheKey = String.Format("Vocatis_GetWaitQueueList_{0}", id);
    var list = Cache.Get(cacheKey) as IEnumerable<DisplayNumber>;
    if (list == null)
    {
      list = Vocatis.GetWaitQueueList(id);
      Cache.Add(cacheKey, list, null,
                DateTime.Now.AddSeconds(1), System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
    }
    return list;
  }

  IEnumerable<DisplayNumber> GetConcatenatedQueueList(FormsModel Model) {
    IEnumerable<DisplayNumber> list = new DisplayNumber[0];
    HashSet<CommonGuidId> ids = new HashSet<CommonGuidId>();
    var sources = Model.Style.StyleInstance.Where(f => f.Key.StartsWith("source"));
    foreach (var f in sources)
    {
      var id = (CommonGuidId)f.Value;
      if (id.IsEmpty || ids.Contains(id))
      {
          continue;
      }
      ids.Add(id);
      list = list.Concat(GetWaitQueueList(id));
    }
    return list;
  }

  string FormatOutput(IEnumerable<DisplayNumber> list) {
    var result = list.Select(x =>
      new {
        number = x.Number,
        room = x.RoomName
      });
    return JsonConvert.SerializeObject(result);
  }

  string WaitDataNotEmptyOrTimeout(FormsModel model, int wait, string last)
  {
    var endTime = DateTime.Now + TimeSpan.FromSeconds(wait);
    string json;
    using (var sha1 = SHA1.Create())
    {
      while (true)
      {
        var list = GetConcatenatedQueueList(model);
        json = FormatOutput(list);
        if (wait == 0 || String.IsNullOrEmpty(last))
          break;
  
        // Compute the hash
        var jsonBytes = Encoding.UTF8.GetBytes(json);
        var hashBytes = sha1.ComputeHash(jsonBytes);
        var hashString = BitConverter.ToString(hashBytes).Replace("-", "");
        
        if (!string.Equals(last, hashString, StringComparison.OrdinalIgnoreCase))
          break;
        
        if (DateTime.Now < endTime)
          System.Threading.Thread.Sleep(1000);
        else
          break;
      }
    }
    return json;
  }
}
@{
  Response.ContentType = "application/json";
    
  var Model = new FormsModel(this);
  PageData["Model"] = Model;

  var waitS = Request.QueryString["wait"];
  var wait = waitS != null ? int.Parse(waitS) : 0;
  var last = Request["last"];

  var result = WaitDataNotEmptyOrTimeout(Model, wait, last);
}@Html.Raw(result)