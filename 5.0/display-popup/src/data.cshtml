@using iSign
@using Newtonsoft.Json
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@using System.Linq
@using System.Web.Caching
@functions{
  IEnumerable<DisplayNumber> GetWaitQueueList(CommonGuidId id)
  {
    var cacheKey = String.Format("Vocatis_GetWaitQueueList_{0}", id);
    var list = Cache.Get(cacheKey) as IEnumerable<DisplayNumber>;
    if (list == null)
    {
      list = Vocatis.GetWaitQueueList(id);
      Cache.Add(cacheKey, list, null,
                DateTime.Now.AddSeconds(1), System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
    }
    return list;
  }

  IEnumerable<DisplayNumber> GetConcatenatedQueueList(FormsModel Model) {
    IEnumerable<DisplayNumber> list = new DisplayNumber[0];
    HashSet<CommonGuidId> ids = new HashSet<CommonGuidId>();
    var sources = Model.Style.StyleInstance.Where(f => f.Key.StartsWith("source"));
    foreach (var f in sources)
    {
      var id = (CommonGuidId)f.Value;
      if (id.IsEmpty || ids.Contains(id))
      {
          continue;
      }
      ids.Add(id);
      list = list.Concat(GetWaitQueueList(id));
    }
    return list;
  }

  IEnumerable<DisplayNumber> WaitDataNotEmptyOrTimeout(FormsModel model, int wait)
  {
    var endTime = DateTime.Now + TimeSpan.FromSeconds(wait);
    IEnumerable<DisplayNumber> list;
    do
    {
        list = GetConcatenatedQueueList(model);
        if (list.Any())
          break;
        
        System.Threading.Thread.Sleep(1000);
    }
    while (DateTime.Now < endTime);
    return list;
  }
}
@{
  Response.ContentType = "application/json";
    
  var Model = new FormsModel(this);
  PageData["Model"] = Model;

  var waitS = Request.QueryString["wait"];
  var wait = waitS != null ? int.Parse(waitS) : 0;

  // get list
  var list = WaitDataNotEmptyOrTimeout(Model, wait);

  // format output
  var result = list.Select(x =>
    new {
      number = x.Number,
      room = x.RoomName
    });
}
@Html.Raw(JsonConvert.SerializeObject(result))
