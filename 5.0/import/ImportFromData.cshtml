@* 
 *  Copyright (C) 2023 DE SIGNO GmbH
 *  
 *  This program is dual licensed. If you did not license the program under
 *  different terms, the following applies:
 *  
 *  This program is free software: You can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *  
 *@
@using System.Globalization
@using System.Threading
@using System.Xml
@using iSign
@using ISS.Session
@using Stolltec.Forms
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@{
    var partial = Request["X-Requested-With"] == "XMLHttpRequest" || (Request.Headers != null && Request.Headers["X-Requested-With"] == "XMLHttpRequest");
}

@helper import()
{
    var Model = new FormsModel(this);

    // Select import time span
    var importMode = (string)Model.Style["im"].FieldInstance.Value;
    DateTime timeTo, timeFrom; // local time!
    switch (importMode)
    {
        case "day":
            timeFrom = DateTime.Today;
            timeTo = timeFrom.AddDays(1.0);
            break;
        case "+5min":
            timeFrom = DateTime.Today;
            timeTo = DateTime.Now.AddMinutes(-5);
            break;
        case "-5min":
            timeFrom = DateTime.Today;
            timeTo = DateTime.Now.AddMinutes(5);
            break;
        case "-30min":
            timeFrom = DateTime.Today;
            timeTo = DateTime.Now.AddMinutes(30);
            break;
        case "-60min":
            timeFrom = DateTime.Today;
            timeTo = DateTime.Now.AddHours(1);
            break;
        default: // jit
            timeFrom = DateTime.Today;
            timeTo = DateTime.Now;
            break;
    }

    Func<string, string> Normalize = (string text) =>
    {
        if (text.StartsWith("=\"") && text.EndsWith("\""))
        {
            text = text.Substring(2, text.Length - 3);
        }
        else
        {
            text = text;
        }
        return text;
    };
    Func<string, string> ExtractNumber;
    switch ((string)Model.Style["nm"].FieldInstance.Value)
    {
        default:
        case "whole":
            ExtractNumber = (string text) => text;
            break;
        case "last3":
            ExtractNumber = (string text) => text.Substring(Math.Max(0, text.Length - 3));
            break;
        case "last4":
            ExtractNumber = (string text) => text.Substring(Math.Max(0, text.Length - 4));
            break;
        case "Tlast3":
            ExtractNumber = (string text) => "T" + text.Substring(Math.Max(0, text.Length - 3));
            break;
        case "Tlast4":
            ExtractNumber = (string text) => "T" + text.Substring(Math.Max(0, text.Length - 4));
            break;
    }
    DateTimeStyles parseFlags;
    switch((string)Model.Style["tz"].FieldInstance.Value)
    {
        case "srv":
            // Alredy in local time zone.
            parseFlags = DateTimeStyles.AssumeLocal;
            break;
        default:
        case "utc":
            parseFlags = DateTimeStyles.AssumeUniversal;
            break;
    }
    var datef = (string)Model.Style["datef"].FieldInstance.Value;
    IFormatProvider format = (datef == "iso8601") ? null : CultureInfo.GetCultureInfo(datef);
    Func <dynamic, DateTime> ReadDateTime;
    if (!Model.Style.StyleInstance.StyleKey.EndsWith("_ts"))
    {
        ReadDateTime = (dynamic item) => DateTime.Parse(item.date, format, parseFlags) + TimeSpan.Parse(item.time);
    }
    else
    {
        ReadDateTime = (dynamic item) => DateTime.Parse(item.ts, format, parseFlags);
    }
    if (timeTo > timeFrom)
    {
        lock (this.GetType())
        {
        string cacheKey = "voc_import_list_" + DateTime.Today.ToString("dd-MM-yy") + Request.Url;
        var idList = Cache.Get(cacheKey) as HashSet<string> ?? new HashSet<string>();

        // filter list by time range [from, to)
        var addList = from dynamic item in Model.DataSource("import")
                    let start = ReadDateTime(item)
                    where start >= timeFrom && start < timeTo && !idList.Contains(item.id)
                    orderby start ascending
                    select new {
                        Id = item.id,
                        WaitNumber = item.wn,
                        Start = start,
                        Name = item.name,
                        Title = item.title,
                        Desc = item.description,
                        Reference = item["ref"],
                        Plan = Normalize(item.plan)
                    };

        const int count = 4;
        var planName = new string[count];
        var queueid = new CommonGuidId[count];
        for (int i = 0; i < count; i++)
        {
            planName[i] = (string)Model.Style["plan_name" + (i+1)].FieldInstance.Value;
            queueid[i] = (CommonGuidId)Model.Style["queueid" + (i+1)].FieldInstance.Value;
        }
        var category = (CommonGuidId[]) Model.Style["category"].FieldInstance.Value;
        var postpone = (string)Model.Style["pp"].FieldInstance.Value == "1";

        <text>
        Import
        Range: [@timeFrom, @timeTo]
        <ul>
        @foreach (var item in addList)
        {
            idList.Add(item.Id);
            Func<CommonGuidId, WaitNumber> CreateTicket = (CommonGuidId queue) =>
            {
                var ticketNum = ExtractNumber(item.WaitNumber);
                using (var voc = SessionInstancesModule.GetInstance().UseSharedInstance<IVocatisData>())
                {
                    var ticket = voc.Instance.NewNumber(ticketNum, queue, category);
                    ticket.Name = item.Name;
                    ticket.Description = item.Desc;
                    ticket.Phone = item.Start.ToLocalTime().ToShortTimeString() + " - " + item.Title;
                    ticket.ReferenceId = item.Reference;
                    voc.Instance.UpdateNumber(ticket);
                    if (postpone) {
                        voc.Instance.PostponeNumber(ticket.Id, item.Start);
                    }
                    return ticket;
                }
            };
            string plan = item.Plan;
            var index = Array.IndexOf(planName, plan);
            if (index >= 0)
            {
                <text>Plan @(index+1)</text>
                CreateTicket(queueid[index]);
            }
            else
            {
                <text>Skipped</text>
            }
            <li>
                Item @item.Id
                Start: @item.Start
                Plan: @plan
            </li>
        }
        </ul>
        </text>
        Cache.Insert(cacheKey, idList);
    }
    }
}

@if (partial)
{
    @import()
}
else
{
<!DOCTYPE html>
<html>
<head>
  <title>Import</title>
  <meta http-equiv="refresh" content="60">
</head>
<body>
  @import()
</body>
</html>
}