@using iSign
@using System.Web.Optimization
@using Stolltec.Forms.Model
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@{
    var Model = new FormsModel(this);

    IEnumerable<DisplayNumber> list = new DisplayNumber[0];
    HashSet<CommonGuidId> ids = new HashSet<CommonGuidId>();
    for (int i = 1; i <= 8; i++)
    {
        var name = "source" + i;
        var id = (CommonGuidId)Model.Style[name].FieldInstance.Value;
        if (id.IsEmpty || ids.Contains(id))
        {
            continue;
        }
        ids.Add(id);
        list = list.Concat(Vocatis.GetWaitQueueList(id));
    }
    list = list.Take(8);
    var cats = (CommonGuidId[])Model.Style["highlightcat"].FieldInstance.Value ?? new CommonGuidId[0];

    // the $.fn.vocatisList function requests the page to update the view
    // We minimize the overhead by just sending the required contents.
    var partial = Request["X-Requested-With"] == "XMLHttpRequest" || (Request.Headers != null && Request.Headers["X-Requested-With"] == "XMLHttpRequest");
}

@helper ItemsList(IEnumerable<DisplayNumber> list, CommonGuidId[] cats)
{
    <table id="list">
        <tbody>
            @foreach (var x in list)
            {
                <tr>
                    <td class="room">@x.RoomName</td>
                    <td class="number">
                        @if (x.Categories.Any(cid => cats.Contains(cid.Id)))
                        {
                            <img src="termin.png" class="termin" alt="termin">
                        }
                        @if (!String.IsNullOrEmpty(x.IconUrl))
                        {
                            <img src="@Href(x.IconUrl)">
                        }
                        @x.Number
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (partial)
{
    @ItemsList(list, cats)
}
else
{
    <!DOCTYPE html>
    <html>
    <head>
        <title>Vocatis</title>
        <link href="@Href("display.css")" type="text/css" rel="Stylesheet" />
    </head>  
    <body class="list">
        @Scripts.Render("~/Scripts/jquery", "~/Scripts/forms", "~/Scripts/vocatis.js")
        <header>
        </header>
  
        <h3>
            Wir beraten gerade
        </h3>
        @ItemsList(list, cats)

        @{
            var notify = Model.Style["notify"].FieldInstance.Value as string;
            var popup = Model.Style["popup"].FieldInstance.Value as string;
        }
        @if (!String.IsNullOrEmpty(notify))
        {
            <audio id="notify">
                <source src="@Href(notify)" type="audio/mp3" />
            </audio>
        }
        @if (!String.IsNullOrEmpty(popup))
        {
            <div id="popup" style="display:none;" class="popup @popup">
                <h1>~number~</h1>
                <h2>SIE SIND DRAN!</h2>
                <h4>Kommen Sie einfach direkt zu uns.<br>Wir erwarten Sie an</h4>
                <h2>~room~</h2>
            </div>
        }
        <script type="text/javascript">
            $(document).ready(function () {
                var popupContent = $("#popup").html();

                $("#list")
                    .vocatisList({
                        interval: 2500
                    })
                    .highlightNumbers({
                        items: "tr:not(.spacer)",
                        call: function (items) {
                            var audio = document.getElementById("notify");
                            if (audio) audio.play();

                            if (popupContent) {
                                $("#popup").html(popupContent.replace("~number~", items[0].number).replace("~room~", items[0].room)).show();
                                window.setTimeout(function () { $("#popup").hide(); }, 10000);
                            }
                        }
                    });
            });
        </script>
      
    </body>
</html>
}