@*
 *  Copyright (C) 2023 DE SIGNO GmbH
 *  
 *  This program is dual licensed. If you did not license the program under
 *  different terms, the following applies:
 *  
 *  This program is free software: You can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *  
 *@
@using System.Linq
@using System.Threading.Tasks
@using System.Web.Mvc
@using iSign
@using Stolltec.Vocatis
@using Stolltec.Vocatis.Model
@functions {
  async Task<WaitNumber> GetNumber(IVocatisData voc, Guid? apt, string number, CommonGuidId queueid, CommonGuidId[] catids) {
    if (apt != null) {
      // check if theres an existing number with that appointment
      // required iSign 8 or newer
      var awn = await voc.GetAppointmentWithNumbers(apt.Value);
      if (awn.Item1 != null && awn.Item2 != null && awn.Item2.Any()) {
        return awn.Item2.First();
      }
    }
    return number == null ?
      await voc.NewNumberAsync(queueid, catids, apt) :
      await voc.NewNumberAsync(number, queueid, catids, apt);
  }
}
@{
 /*
    webservice for number generation
  */
  var queueid = CommonGuidId.FromString(Request["queue"]);
  var catids = GuidIdsFieldInstance.ParseValue("",Request["categories"]).Value as CommonGuidId[];
  var aptS = Request["appointment"];
  Guid? apt = null;
  Guid aptG;
  if (Guid.TryParse(aptS, out aptG)) {
    apt = aptG;
  }

  var number = Request["number"];
  var reference = Request["ref"];
  var name = Request["name"];
  var phone = Request["phone"];
  var desc = Request["description"];
  var postpone = Request["postpone"];

  var voc = Vocatis.GetVocatisData();

  // find / create the ticket
  var ticket = Task.Run(() => GetNumber(voc, apt, number, queueid, catids))
    .GetAwaiter().GetResult();

  // set ticket data
  if (!String.IsNullOrEmpty(reference) || !String.IsNullOrEmpty(phone) || !String.IsNullOrEmpty(name) || !String.IsNullOrEmpty(desc)) {
    ticket.Name = name;
    ticket.Phone = phone;
    ticket.Description = desc;
    ticket.ReferenceId = reference;
    voc.UpdateNumber(ticket);
  }

  // postpone
  if (!String.IsNullOrEmpty(postpone) && ticket.State != WaitNumberState.Dismissed) {
    voc.PostponeNumber(ticket.Id, DateTime.Parse(postpone));
  }

  Response.ContentType="application/json";
}
{ 
  "id":"@ticket.Id",
  "number":"@ticket.Number"
}
